// Code generated by go-bindata.
// sources:
// ui/build/css/app.css
// ui/build/img/loader.svg
// ui/build/index.html
// ui/build/js/app.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssAppCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\xdb\x6e\xe3\x20\x10\x7d\xcf\x57\x8c\x54\x55\xda\x4a\xc1\x22\x89\xbc\x95\x88\xd4\x7f\xc1\x66\x6c\xb3\xc5\x60\x01\xb9\x6d\xd5\x7f\x5f\x61\x70\x6c\xe7\xda\x97\xcd\x83\x15\x06\xe6\x70\x66\xe6\x70\x0a\x23\x4e\x4b\x68\x7c\xab\xe0\x6b\x01\xd0\x72\x5b\x4b\xcd\x80\x6e\x17\x00\x1d\x17\x42\xea\x3a\xac\xe0\x7b\xb1\xc8\x94\xe1\x02\xed\x12\x32\x6c\x3b\x7f\x22\x2d\x3a\xc7\x6b\xec\xf3\x3c\x1e\x3d\xe1\x4a\xd6\x9a\x41\x89\xda\xa3\x9d\x01\xac\x2d\xb6\x21\x50\x19\xed\x89\x93\x7f\x91\xc1\x3a\xcb\x43\xb0\x07\x2e\x78\xf9\x09\x1f\xe0\x3a\xae\x7b\xb4\xce\x38\xe9\xa5\xd1\x0c\x78\xe1\x8c\xda\x79\x0c\xc9\xde\x74\x0c\x56\x09\x49\x61\xe5\xc7\x55\x69\x94\xb1\x0c\x0e\x8d\x8c\x47\x27\xf7\x6c\x68\x77\x0c\xa1\xc2\x58\x81\x96\xc1\xba\x3b\x82\x33\x4a\x8a\xf1\x74\xdc\x22\x96\x0b\xb9\x73\x0c\x56\x94\xa6\x9c\xdb\x55\x1d\xa4\xf0\x0d\x83\xf7\x3c\x1e\x6a\x50\xd6\x8d\x1f\xd7\x4a\x6a\x24\xe7\x60\x42\x12\xd2\x75\x8a\x9f\x18\x14\xca\x94\x9f\x63\xd5\xac\x31\x7b\xb4\xd3\xda\x43\xb4\xb6\x66\xa7\x05\x03\x5b\x17\xfc\xd7\x9a\xd2\x25\x8c\x1f\x9a\xbd\xe7\x6f\x69\x1e\xd2\x79\x22\x3d\xb6\x0e\xc6\xff\x3d\x48\xea\xc7\xcb\x66\xb3\x09\xb7\x87\x3b\x2a\x65\x0e\x0c\x1a\x29\x04\xea\xed\xac\xc7\x16\x15\xf7\x72\x8f\x33\x9e\x95\xc2\x49\xdb\x48\x61\xbc\x37\x2d\x83\xd5\xb9\x7b\x2f\x94\xf6\xb2\x00\xb8\xc3\x43\xb6\x75\xcf\xe5\xdc\xb0\x15\xa5\xaf\x0f\x33\xb2\x30\xd4\xe5\xdd\x5d\x1b\x5a\x9a\x20\xaf\x78\x02\x54\xca\x70\xcf\x7a\x61\xc4\xc0\x28\xdf\xec\x7d\xd0\xda\xe3\xbb\xe7\x7c\x37\xf4\x35\x02\xb5\xfc\x48\x52\x6c\x9d\xa7\x81\xde\x13\xc7\x7c\x80\xc3\x00\xae\x15\x3a\xd7\xe8\x53\x76\x4f\x6b\xc7\x23\x11\xd2\x62\x19\x47\x5a\x1a\xb5\x6b\x75\xdc\xfb\xb3\x73\x5e\x56\x27\x52\x1a\xed\x51\xfb\x39\xd9\x41\xcb\x43\xa9\xd3\x07\xfa\x94\x54\x65\x79\x8b\x89\xd4\x58\x35\x49\xa5\x16\x8a\x97\x9f\x69\x12\x37\xb5\x36\x17\xc6\x74\x64\xa4\x7f\xea\xf9\xef\xd7\xcb\x8e\x26\x6a\x65\x10\xf4\x4f\xb8\x7d\x40\x26\xb5\x46\xfb\x1f\x3a\x77\xdb\xa3\x92\x4b\xd1\x44\x3c\xbd\x9a\xb4\x8c\x9e\x95\x16\x36\x1a\xc4\xc3\x37\x94\xed\xa5\x40\xf3\xac\x18\x6d\x34\x5e\x19\x02\x4f\xce\x72\x36\x67\x81\xa5\xb1\x3c\x32\x1e\x32\xe6\xf7\x0e\x29\x17\x5e\x72\xa1\x68\xec\x7f\x31\xfb\x69\xfe\xf4\x55\x5d\xe0\xe4\x79\xfe\x33\x90\x87\x4d\xb8\xe1\x97\xab\xe0\x92\xe3\x87\x66\x9b\xb7\x6d\x3a\x3b\x9f\x7f\xdf\xb2\xb0\x4e\x68\x83\x67\xaf\x28\xdd\x37\xdb\x0b\x2b\x3e\xab\xf9\x4a\x43\xf7\x15\xf4\x40\x3f\x57\x8e\x1c\xa7\x91\xd8\xc4\x8a\xbf\xce\xe6\x33\x67\x06\xdf\x8b\x7f\x01\x00\x00\xff\xff\x9f\x41\x84\x4f\xb6\x07\x00\x00")

func cssAppCssBytes() ([]byte, error) {
	return bindataRead(
		_cssAppCss,
		"css/app.css",
	)
}

func cssAppCss() (*asset, error) {
	bytes, err := cssAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/app.css", size: 1974, mode: os.FileMode(420), modTime: time.Unix(1479896890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imgLoaderSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\xd6\xcf\x6b\xdb\x30\x14\x07\xf0\x7f\xe5\xa1\x1d\xde\x7a\x68\xfc\xfc\xab\x69\x47\x14\xd8\x76\xee\x0e\xbb\xed\xa8\xc6\xcf\x8e\x98\x6d\x19\xe9\x39\x76\xfe\xfb\x11\xa7\xeb\x48\x8f\x03\xe1\x8a\xc4\x46\x32\x7c\xd1\x07\xbe\x08\xed\xc2\xa9\x81\xc9\x56\x72\xd4\x98\x66\x34\xcc\x08\x47\xb6\xcd\x51\xde\xa6\x73\xd7\xf6\x41\xab\xa3\xc8\xf0\x25\x49\xa6\x69\xda\x4c\xf9\xc6\xf9\x26\xc9\x88\x28\x09\xa7\x46\xc1\xc9\xf2\xf4\xcd\xcd\x5a\x11\x10\xa4\xb4\xfc\x15\x0c\x9e\x03\xfb\x13\x7f\x0d\x03\x1f\xe4\xa7\x11\xeb\xb4\x9a\x9f\x6d\xf5\xeb\xd9\x56\x0a\x0e\xad\x09\x41\xab\xd1\xb6\xf7\x15\xd7\x66\x6c\x45\xed\x77\x9e\x0f\x02\x97\x20\x05\xe7\xe5\x79\xdd\x9a\x5a\x02\x5f\x37\x76\x9d\xd4\xb6\x6d\xb5\xea\x5d\xcf\x6f\x51\x2f\xbf\xd5\x7e\x97\x5c\x22\x5e\x83\x60\xd6\x58\x6c\x37\x25\xc2\x59\x63\x41\xf8\x17\x5a\xfe\x43\x66\x84\xe0\xe7\x65\xc9\x9f\x97\xd7\x12\x8c\x9f\x88\x08\x41\xbc\xe9\x43\xed\x7c\xa7\xd1\x3b\x31\xc2\x9f\x09\xca\xcb\xef\xee\xfa\xa9\xbd\x2e\xdd\xe7\x74\x87\x7b\x80\x9d\xe9\x6d\x67\x84\xc1\x88\x78\xfb\x32\x0a\xff\x30\x1d\x6b\x74\x83\x39\x58\x39\x23\xd4\xde\x75\x1a\x53\x04\x71\x1a\x09\xa1\x1a\xbd\xc6\x34\x20\xbc\x70\x63\x7b\x8d\x14\x10\x3c\x0f\x6c\xe4\xbb\x1b\x7b\xd1\x68\xfb\x8a\x6b\xdb\x5b\x61\x4c\xa2\xdb\xf2\xc8\xb8\x0d\x3d\xe6\xb7\x63\x55\xee\x43\x6c\x6e\xfa\xf0\x6e\xac\xca\x7d\x8a\xcd\xcd\xca\x55\x7d\x69\x16\x1b\x98\x7f\xa4\xf6\xa6\x65\x6c\x6e\x71\xdb\xdf\xed\xba\xdc\xc7\xd8\xdc\x75\xdb\x9b\xa5\xd1\x7d\xb7\x87\x6f\xb1\x2e\xb7\x88\xcd\xfd\x50\x67\x6f\xb6\x8d\xcd\xdd\xae\x5b\xdf\x9c\x62\x03\xdf\x5d\x1d\xd6\xad\x6f\x1e\xfd\xaa\xf4\x94\xfe\x47\x7d\x2f\xb7\xf1\xfd\x9f\x00\x00\x00\xff\xff\xaa\x50\xbf\x5c\xd2\x0b\x00\x00")

func imgLoaderSvgBytes() ([]byte, error) {
	return bindataRead(
		_imgLoaderSvg,
		"img/loader.svg",
	)
}

func imgLoaderSvg() (*asset, error) {
	bytes, err := imgLoaderSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "img/loader.svg", size: 3026, mode: os.FileMode(420), modTime: time.Unix(1479896890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xc1\x8e\xd3\x30\x10\x3d\x6f\xbf\x22\xeb\x33\xf6\x50\x4a\x11\x42\x71\x25\x84\x38\x70\x5d\x09\xc4\xd5\xb1\xa7\x9b\x09\x8e\x9d\xf5\x4c\xd2\xed\xdf\xa3\x24\xcb\x16\x54\x09\x09\xb1\x27\xeb\x3d\x7b\xde\x7b\x33\x1a\xd7\xb7\x21\x7b\x39\x0f\x58\xb5\xd2\xc7\xc3\xa6\x9e\x8f\x2a\xba\x74\x6f\x15\x26\x35\x13\xe8\xc2\x61\x73\x53\xf7\x28\xae\xf2\xad\x2b\x8c\x62\xd5\x28\x47\xfd\x5e\x3d\xf3\xad\xc8\xa0\xf1\x61\xa4\xc9\xaa\xef\xfa\xeb\x47\xfd\x29\xf7\x83\x13\x6a\x22\xaa\xca\xe7\x24\x98\xc4\xaa\x2f\x9f\x2d\x86\x7b\xbc\x94\x25\xd7\xa3\x55\x13\xe1\x69\xc8\x45\x7e\x7b\x79\xa2\x20\xad\x0d\x38\x91\x47\xbd\x80\x57\x15\x25\x12\x72\x51\xb3\x77\x11\xed\x56\x1d\x36\x9b\x9b\x5a\x48\x22\x1e\xbe\x51\xc0\xcc\x35\xac\x68\xe6\x23\xa5\x1f\x55\xc1\x68\x15\xcb\x39\x22\xb7\x88\xa2\xaa\xb6\xe0\xd1\xaa\x39\x2c\x7f\x00\xe8\xdd\xa3\x0f\xc9\x34\x39\x0b\x4b\x71\xc3\x0c\x7c\xee\xe1\x99\x80\x9d\xd9\x99\x3d\x78\xe6\x0b\x67\x7a\x4a\xc6\x33\x2f\x4d\xfc\xcd\x05\x46\x02\xc7\x8c\xc2\x8b\x80\x1b\x86\xa7\xb2\x1a\xd6\x91\xd6\x4d\x0e\xe7\x59\x25\xd0\x54\x51\xb0\xca\x0d\xc3\xda\x14\x04\x9a\xe6\x0b\xf6\x85\x06\xa9\xb8\x78\xab\x00\x7c\x48\x1d\x1b\x1f\xf3\x18\x8e\xd1\x15\x5c\xb2\xba\xce\x3d\x42\xa4\x86\xa1\x71\x0d\x46\xed\x73\x41\xd8\x9b\x77\x66\xbb\x87\xa6\xe4\x13\x63\xd1\x43\x8e\xe7\x23\xc5\xb8\x44\xef\x58\x1d\x6a\x58\x95\xff\xd9\xa3\x7b\x18\xb1\x9c\xe1\x8d\xd9\x9a\xb7\x4f\xe0\xff\x45\x0b\x3a\x2f\xf0\xda\x6c\x77\x66\xb7\x02\x7d\x22\x69\xb5\x0b\x21\x27\x7e\x01\x6d\x5d\xf2\x28\x58\x7e\x59\xdc\xcd\xdc\xdd\x42\x5d\x89\xdf\x6a\x7d\x6d\x60\x3a\x0e\x18\x69\x2a\x26\xa1\x40\x1b\xe7\x4c\x10\x9d\x20\xaf\xe8\x6a\x02\x5a\x5f\x05\xbd\x2c\x43\xb7\xee\xc2\x9f\xce\x35\xac\xcb\x50\xc3\xf2\x0d\x7f\x06\x00\x00\xff\xff\x34\xee\xae\x9d\x96\x03\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 918, mode: os.FileMode(420), modTime: time.Unix(1479896890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x5f\x6f\xdc\xb8\x11\x7f\xa6\x3e\xc5\x44\x6d\x6f\xb5\x39\x59\xeb\xa2\x40\x1f\xd6\xd8\x2b\x7c\xb1\x03\x1b\x88\x93\x60\x9d\xa6\x0f\x45\x11\x30\xd2\xec\x8a\x35\x45\xaa\x22\x65\x77\xe1\xdb\xef\x5e\x0c\x49\x69\xb5\xff\x1c\x27\x29\x8a\xd4\x2f\x5e\x91\x9c\xdf\xcc\xfc\x66\x38\x1c\x32\x9a\x4c\xe0\x5a\xe5\xb2\x2d\x10\xe6\x3c\xb7\x73\xdd\x5a\x6c\xe0\x46\x17\xad\xc4\xe8\x9e\x37\x10\x46\x66\x30\xc7\x7e\x3e\xcb\x1b\xe4\x16\x93\xf1\xd9\x66\xc9\xce\x0a\xf7\x6f\x30\x7d\xc5\x55\x21\xf7\x70\x86\x53\x7e\xf1\x05\x2e\x78\x2b\xed\x21\xc8\xe1\x94\x5f\xfc\x46\xa8\xbb\x9d\x45\x34\x74\x16\x91\x5b\xe7\x75\x2d\x45\xce\xad\xd0\x0a\x5e\x37\xbc\xf2\xee\x9c\xd7\x75\x27\x11\xbc\x78\x25\xb9\x31\xc9\x63\xc4\x0a\x61\x6a\xc9\x57\x6f\x79\x85\x53\x88\xcf\xeb\x3a\x4e\xa3\x88\x35\xa8\x0a\x6c\x92\x31\x3c\x46\x8c\x35\x68\xdb\x46\x6d\x89\x5f\x4a\xac\x50\xd9\x64\xe8\x4a\x0a\xaa\x95\x72\x7c\x16\xb1\x75\xb4\x1e\x9f\x45\x4e\xf3\x7b\xc9\x57\x1b\x02\x9e\x56\xee\xd7\x92\xfe\x88\x4d\x26\x70\xf5\xe6\x36\xfb\xa7\x81\x42\xa3\x51\x23\x0b\x06\xb1\x02\xab\xe1\x41\x37\x77\x60\x74\x85\xa5\x7e\x18\x45\x6c\xf2\x32\x82\x5c\x57\xb5\x56\xa8\xec\x85\x28\x6e\x74\xab\xac\x33\x1c\x98\x58\x40\x72\x25\x4d\x26\xcc\x6d\x5b\xd7\xba\xb1\x58\x24\x63\x3f\xc5\x24\x5a\xb8\x17\x05\x6a\x98\x81\x2d\x85\xc9\x3e\xb9\xaf\x6c\x89\xf6\xe2\xdd\xcd\x5b\x5d\xb8\x40\x03\x63\x6e\xb2\x94\x06\x66\xa0\xf0\x01\xae\x24\x59\x0e\x8c\xb1\x02\x3f\xb7\xcb\x29\xd8\xa6\xc5\x34\x02\x06\xee\x8f\x2d\x1a\xbe\x7c\xa3\x79\x21\xd4\xf2\x83\xa8\xf0\x5d\x6b\xa7\xf0\xe7\xd3\xd3\xd3\xd3\xd4\x09\xad\x3d\x28\x69\xf7\x98\x1d\x7c\x3f\x5c\x37\xba\xee\x27\xdc\x87\x9b\x2a\xa5\xc9\xb8\xb5\x3c\x2f\x6f\xb0\x10\x3c\x71\xd6\x8e\xfb\x29\xad\x9c\xa7\x97\xf7\xa8\xac\xc9\x2e\xe7\xf3\x77\xf3\x14\x16\xad\xca\x5d\x26\x24\x48\xe3\x29\x14\xdc\xf2\xe0\x3f\xcb\xb5\x32\x5a\x62\x26\xf5\x32\x71\xe3\x0e\x6b\x3d\x3e\x8c\x78\x73\x79\x71\x7d\xfe\xe9\xfc\xc3\x87\xf3\x57\x57\x97\x17\x43\xe8\x43\x78\xb1\x67\x96\xab\x82\xbc\xa4\x28\xf2\x06\x41\xe9\x07\xf8\xac\x5b\x55\x80\xd5\x4b\xb4\x25\x36\xf0\x22\xf6\x6a\x9d\x46\xa9\x79\x71\xab\xdb\x26\xc7\x24\x9e\x50\x5e\x48\x61\xec\x24\x86\x9f\x3d\x27\x59\xcd\x1b\x5e\x99\x8c\x52\xc6\x0e\xc4\x76\x0c\x3d\x7f\x7b\xfd\xfa\xf2\xf6\xc3\xa7\xf7\xe7\xf3\xdb\x6d\x4b\x0f\x90\xb0\xcf\xc2\xfe\x70\x5c\x71\x25\x16\x68\x2c\x90\x81\x58\xa4\xb0\x70\x4e\x90\x61\x24\x92\x49\xbc\x47\x32\x1f\xd5\xd2\x96\xf0\x33\xc4\xf0\xaf\x96\x4b\x61\x57\xe0\x66\x3a\x17\x99\x4f\x30\x72\x2c\xa4\x56\x97\x0d\xfe\xdf\x3a\x82\x35\x25\x49\x9f\xcd\x7f\x13\x52\xfe\x55\x55\x83\x84\xee\x92\x25\x2b\x70\x93\x09\x63\x2f\xf7\x72\x12\x45\xc7\x65\x43\x1e\xd7\xbc\x35\xf8\x91\xec\x20\x13\x18\x9b\x4c\x8e\x61\xb2\x35\xd5\x81\xe1\x7a\x87\xf2\xbc\x6d\xd3\xfb\x4a\xe2\xc3\x01\xd3\xe4\x30\x83\x38\x1e\x2c\x09\x74\xec\x8b\x38\x03\x96\xfa\x57\x9e\xdf\x25\xe8\xb5\x63\x56\x37\x2e\x8a\xa1\x2a\x7a\xc1\x07\xa1\x0a\xfd\x90\x95\xc2\x58\xdd\xac\xb2\xcf\x24\xd0\x03\x3c\xb7\x92\x45\x8c\xb1\xb8\x10\xf7\x71\x4a\xbf\x1e\x21\xa7\x1a\x15\x0a\x53\x1d\x0a\x13\xdc\xe1\x6a\x3a\xd8\x98\x59\xcd\x6d\x49\xe4\x33\xc6\x8e\x61\x0e\x40\x77\x50\x8d\xe5\x4b\x8c\x83\xf8\x41\x79\xbf\x8d\xe2\xd4\xd9\xce\x18\x33\x4d\x3e\x85\x9d\xad\xb1\x65\xcd\x66\x7f\x78\x50\xd6\xe0\x62\x0a\x39\xcc\x7e\x19\x06\x0b\x66\x90\x87\xf9\x07\x51\xd8\x72\x0a\xf1\x1f\x4f\x4f\xff\x10\xa7\x90\x6b\x65\x1b\x2d\x4d\xa8\x6a\xc0\x5b\xab\xa9\x2a\xfb\x6f\x58\x8f\x49\x6a\xfc\x05\x7f\x79\xef\x6d\xe9\xd4\xc7\xbf\x8b\x53\xd0\xea\x95\x14\xf9\x5d\x60\xcf\x47\x35\xdd\xa2\x83\xc2\xf6\x34\x1b\xa6\xe6\x8a\xc8\xd8\x12\x5b\xca\x55\x5d\x8a\x5c\x2b\xe8\x7f\x9d\xe4\x25\xde\x37\x5a\x9d\x48\x5c\xd8\x38\x85\x98\x37\x82\x9f\x94\xa2\x28\x50\xc5\x53\x88\xc9\x97\xb8\x73\x26\x62\x6c\xe7\xc8\x7a\xad\x65\xf1\xdc\x23\xcb\xaf\xfd\xaa\x23\x93\xb4\xd2\x79\x1d\xf2\xcc\xea\x29\xc4\x14\xcd\x38\x05\x1f\xc0\x29\x3c\x42\xec\x82\x18\x1f\x48\xb6\x6f\x4e\x37\xd2\x71\x22\x2c\x56\xb0\x08\x46\x3f\x95\xce\xc7\x15\x0c\x35\xec\xaa\x20\xbe\x3b\x80\x27\x10\xb6\x20\x76\x30\x16\xd4\xb4\x6c\x40\x9e\x42\xd9\x86\xd9\xc1\x11\x4a\x61\x33\xc0\xf9\xce\x94\xf2\x9c\x9d\xe8\x1a\xd5\x17\x32\x2a\x24\x55\xff\x6f\xfc\xed\x7c\x36\x62\x59\x0e\x08\x1d\x44\x4a\x51\x67\xd7\xeb\x38\x90\xc4\xd4\x82\x3c\x37\x89\xfd\xda\xaf\x4e\xe2\x63\xd5\x52\x7a\xb8\x27\x12\x35\x16\xd5\xd2\xb1\xde\x95\x9f\x3f\x9d\xc6\x29\x94\x48\xee\x76\x5f\xa1\xd6\xb5\x62\xc2\x8d\x41\x6b\x26\xa2\x5a\x4e\x3c\x74\x66\xee\x97\x81\xed\x1d\xaf\x2f\xab\xda\xae\x6e\xd0\x18\xbe\xc4\xe7\xf9\x3e\x94\xf8\xaf\x31\x80\x04\x7a\x52\x05\xd4\x2f\xee\xd8\x3a\x44\x9f\xda\x67\xff\x2b\x7e\xab\xc3\x2e\x35\xa0\x1b\x7f\xe0\x9a\xd0\x76\x08\x15\xa6\x60\x7a\x92\xc4\x47\xc2\xff\x31\xd4\xf9\x67\x30\xf0\xd1\x9f\x31\xdf\x59\xc1\x08\xf0\x7f\x57\xc1\xba\x73\xf1\xc7\x2d\x60\x29\x18\xbb\x92\xe8\x98\xa0\x93\x6d\xd9\x50\xf0\xae\x2b\x4a\x88\x29\xc4\x6d\x23\x93\xd1\xc4\x2d\xdd\x3f\xc5\x7d\x13\x39\x1a\xc7\x3d\x57\x3f\x4e\x1d\xa4\x38\x9f\xe4\xa2\xc9\x25\xfe\x7f\xd4\x41\x61\xec\x33\xab\xa0\x3b\x83\xe9\xee\xb9\x44\x7b\xad\x84\x15\x5c\xde\x5a\x77\xe1\x1f\x6e\x08\xd7\x8a\x8d\xfc\x8e\x1c\x4d\xa1\xdf\xb3\xa3\xb0\x5f\xc3\x58\xc4\xd8\xba\x6b\x41\x17\x68\xf3\xf2\x82\x5b\x9e\x50\x6c\x07\xdd\xb8\x41\xeb\x35\x3c\x1e\x40\x48\xf7\x15\x45\xfe\xaa\xc0\xd8\xef\xa9\xdf\x4e\x46\x13\xd7\x05\x8e\xe8\x82\xc4\x6d\xe9\x6f\x36\xd4\xeb\x39\xb8\x03\x1a\x86\x2a\xdc\xcd\x25\x7c\x7a\x5e\x37\xba\xdc\x9c\xff\x8a\x58\xa7\x73\xdd\xb7\xd4\x87\xaf\xdb\x8c\x11\xdf\x2e\x7b\x67\xc7\xba\x52\xf8\xed\xb7\xd0\xfc\xbb\x05\x3b\xc4\xec\xe1\xd3\x25\x66\x8e\x39\x8a\x7b\x7c\x4f\x58\x89\xc2\x7f\x5b\xf7\x6b\x4f\x61\x3f\xf3\x0d\xfa\xb6\xea\x1e\x5d\x70\x64\x77\x78\xbe\xf0\x24\x12\x83\x1d\x57\xf0\x97\x83\x35\xd1\x9f\xa1\xe1\x09\x04\x7c\xb8\xce\x02\x5c\x27\x39\x83\xbf\xff\xe3\x6c\x78\x87\xda\x0c\x89\x05\x24\xfb\xba\xbc\x45\x6c\x23\xbf\xbf\x24\xab\x78\x9d\x84\xf3\x60\xf6\xcb\x41\xd3\x7c\x8f\x4a\x9b\xdb\x95\x4b\xbf\xd8\xed\x9c\x14\x94\xcb\xfd\xad\x21\xa2\xa6\x1f\xf2\x05\x75\xec\x12\x80\xf5\x36\x0f\xcc\xf0\x63\xce\x8a\x70\xb7\x38\x6c\x84\x3b\x65\xc8\x06\xaf\xd1\xdf\xf5\x86\x0a\xbb\xdb\x1f\xe5\xb1\xb3\x73\xb3\xa4\x33\x60\x1d\xb8\x73\xc7\xeb\x41\x36\xe0\xc5\xcc\x31\x0f\x3f\xfd\x14\x18\xde\xdc\xca\x3b\xc2\xc2\xc0\x6c\x06\xa7\x47\x62\x39\xec\x09\xf6\x23\xfa\xad\x5d\x11\x95\x97\xef\x3f\xfa\x4c\x5f\x06\x7d\x92\xfa\xdf\x5b\xfb\xd8\x3b\xee\x7f\x3b\xaa\x8e\x94\xc6\x46\xb7\x16\xcd\x4e\x71\xdc\x98\xe3\x9e\xf6\xd2\x88\x3d\x86\x00\xb9\x5e\x8c\xda\x34\xff\xda\x37\x75\x8f\x8a\x64\xcb\x21\xf1\xe1\xab\x25\x45\xbd\x17\x72\xf5\x78\x3d\x3e\x22\xd6\xaf\x57\x03\xd2\xba\x0c\x71\x5f\x93\x97\x43\x13\xbe\x0e\xad\xef\x51\x1c\x1a\x7d\x6d\xa3\x85\xb7\xca\xf5\x38\x22\x8a\x86\xef\xab\x4d\xab\x12\x4f\x57\xba\xf5\xee\x7a\xe5\x9f\x1c\xde\x68\xff\xe2\x9a\xc2\x5c\x6b\x1b\x2a\xb0\xb7\x28\xd4\x96\xc3\xe6\x69\x1b\xd2\x2b\x85\x42\xe7\x2d\x8d\x52\x61\x0f\x0b\x7e\x5d\x5d\x17\xc9\x88\xd7\xf5\x88\xd2\x7f\x3d\x3e\xfb\x4f\x00\x00\x00\xff\xff\x81\xa0\xad\x03\xb7\x16\x00\x00")

func jsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_jsAppJs,
		"js/app.js",
	)
}

func jsAppJs() (*asset, error) {
	bytes, err := jsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/app.js", size: 5815, mode: os.FileMode(420), modTime: time.Unix(1479896890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/app.css": cssAppCss,
	"img/loader.svg": imgLoaderSvg,
	"index.html": indexHtml,
	"js/app.js": jsAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"app.css": &bintree{cssAppCss, map[string]*bintree{}},
	}},
	"img": &bintree{nil, map[string]*bintree{
		"loader.svg": &bintree{imgLoaderSvg, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"js": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{jsAppJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

